// app/quotes/nueva/page.tsx
'use client'

import { useEffect, useState } from 'react'
import ClientAutocomplete from '@/components/quotes/ClientAutocomplete'
import AddClientModal from '@/components/clients/AddClientModal'

import { useForm, FormProvider } from 'react-hook-form';

import { Client } from '@/types'
import QuoteItemsWrapper from '@/components/quotes/QuoteItemsWrapper'
import { toast } from 'sonner';

import { QuoteItem, QuoteStatus } from '@prisma/client';

import { useSaveQuote } from '@/hooks/useSaveQuote';
import { PlusCircle, XCircle } from 'lucide-react';
import { useRouter } from 'next/navigation';

import { useCompanyStore } from '@/lib/store/useCompanyStore';




export interface FormData {
  clientId: number;            
  companyId?: number;          // lo a√±adimos manualmente desde Zustand
  notes?: string;
  status?: QuoteStatus; // 'PENDING' por defecto
  items: QuoteItem[];          // puedes usar el tipo de Prisma aqu√≠ sin problema
}


export default function NuevaCotizacionPage() {

    const [client, setClient] = useState<Client | null>(null)
    const [showAddClient, setShowAddClient] = useState(false)

    const companyId = useCompanyStore((s) => s.company?.id);


    const { saveQuote } = useSaveQuote();

    const router = useRouter();




    const methods = useForm<FormData>({
      defaultValues: {
      clientId: 0,
      items: [],
      notes: '',
      status: 'PENDING', // valor por defecto interno
    }
    });


    // Restaurar √≠tems desde localStorage sin romper la hidrataci√≥n
    useEffect(() => {
      if (typeof window !== 'undefined') {
        const itemsFromStorage = localStorage.getItem('quoteItems');
        if (itemsFromStorage) {
          try {
            const parsed = JSON.parse(itemsFromStorage);
            if (Array.isArray(parsed)) {
              methods.setValue('items', parsed);
            }
          } catch (e) {
            console.warn('Error al parsear quoteItems desde localStorage', e);
          }
        }
      }
    }, [methods]);



    useEffect(() => {
      const subscription = methods.watch((value) => {
        if (typeof window !== 'undefined') {
          localStorage.setItem('quoteItems', JSON.stringify(value.items || []));
        }
      });
      return () => subscription.unsubscribe();
    }, [methods]);

    useEffect(() => {
      if (client?.id) {
        methods.setValue('clientId', client.id); // ‚ö†Ô∏è Este campo debe estar en el `defaultValues` tambi√©n
      }
    }, [client, methods]);


    const onSubmit = async (data: FormData) => {
      if (!data.clientId) {
        toast.error("Selecciona un cliente antes de guardar la cotizaci√≥n.");
        return;
      }

        if (!companyId) {
    toast.error("No se ha seleccionado una empresa.");
    return;
  }

      await saveQuote({
        ...data,
        companyId, // ‚úÖ ahora s√≠ cumple con el backend
      });

      // ‚úÖ Limpiar localStorage
      localStorage.removeItem('quoteItems');

      // ‚úÖ Resetear formulario
      methods.reset({
      clientId: 0,  // ‚ö†Ô∏è esto es number
      items: [],
    });


      toast.success("Formulario limpio. Listo para nueva cotizaci√≥n.");


      // ‚úÖ Limpiar estado del cliente seleccionado
      setClient(null);
    };




    

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header responsive con borde azul */}
      <div className="fixed top-0 left-0 right-0 bg-white shadow-sm border-b-4 border-blue-800 z-40">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 py-3 sm:py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2 sm:gap-3">
              <div className="w-1 h-4 sm:h-6 bg-orange-500 rounded-full"></div>
              <div>
                <h1 className="text-base sm:text-lg font-semibold text-gray-900">Nueva Cotizaci√≥n</h1>
                <nav className="text-gray-500 text-xs hidden sm:block">
                  <span>Cotizaciones</span>
                  <span className="mx-1">/</span>
                  <span className="text-blue-800">Nueva</span>
                </nav>
              </div>
            </div>
            {/* Indicador de progreso m√≥vil */}
            <div className="flex items-center gap-1 sm:hidden">
              <div className="w-2 h-2 bg-blue-800 rounded-full"></div>
              <div className="w-2 h-2 bg-gray-300 rounded-full"></div>
              <div className="w-2 h-2 bg-gray-300 rounded-full"></div>
            </div>
          </div>
        </div>
      </div>

      {/* Contenido principal responsive */}
      <div className="pt-16 sm:pt-20 px-4 sm:px-6 pb-6">
        <div className="max-w-7xl mx-auto">
        <FormProvider {...methods}>
        
          <form onSubmit={methods.handleSubmit(onSubmit)} className="space-y-4 sm:space-y-6">

            {/* Card de selecci√≥n de cliente */}
            <div className="bg-white rounded-lg shadow-md border border-gray-200 overflow-hidden">
              <div className="bg-gray-50 border-l-4 border-blue-800 px-4 sm:px-6 py-3">
                <h2 className="text-sm font-medium text-gray-700 flex items-center gap-2">
                  <div className="w-1 h-4 bg-orange-500 rounded-full"></div>
                  Informaci√≥n del Cliente
                </h2>
              </div>
              
              <div className="p-4 sm:p-6 space-y-4">
                <ClientAutocomplete
        key={client ? client.id : 'empty'} // üëà fuerza reinicio visual
          onSelect={(clientLite) => {
            setClient(clientLite as Client); // Conversi√≥n expl√≠cita
            methods.setValue('clientId', clientLite.id);
          }}
          onCreateNew={() => setShowAddClient(true)}
        />




                {/* Info del cliente seleccionado */}
                {client && (
                  <div className="bg-gradient-to-r from-green-50 to-emerald-50 border border-green-200 rounded-lg p-4">
                    <div className="flex items-center gap-2 mb-2">
                      <div className="w-2 h-4 bg-green-500 rounded-full"></div>
                      <span className="text-sm font-semibold text-green-800">Cliente Seleccionado</span>
                    </div>
                    <div className="text-sm space-y-1">
                      <p><span className="font-medium text-gray-700">Nombre/Raz√≥n Social:</span> <span className="text-gray-900">{client.fullName || client.businessName}</span></p>
                      <p><span className="font-medium text-gray-700">Documento:</span> <span className="text-gray-900">{client.documentNumber}</span></p>
                    </div>
                  </div>
                )}
              </div>
            </div>

            {/* Modal para crear nuevo cliente */}
            {showAddClient && (
              <AddClientModal
                onSuccess={async (newClient) => {
                  // Fetch the full client object after creation if needed
                  const response = await fetch(`/api/clients/${newClient.id}`);
                  const fullClient: Client = await response.json();
                  setClient(fullClient);
                  setShowAddClient(false);
                }}
              />
            )}

            {/* Card de Items de cotizaci√≥n */}
            <div className="bg-white rounded-lg shadow-md border border-gray-200 overflow-hidden">
              <div className="bg-gray-50 border-l-4 border-blue-800 px-4 sm:px-6 py-3">
                <h2 className="text-sm font-medium text-gray-700 flex items-center gap-2">
                  <div className="w-1 h-4 bg-orange-500 rounded-full"></div>
                  Items de la Cotizaci√≥n
                </h2>
              </div>
              
              <div className="p-4 sm:p-6">
                <QuoteItemsWrapper />
              </div>
            </div>





            {/* Bot√≥n para limpiar los √≠tems guardados localStorage */}
            {methods.watch('items')?.length > 1 && (
              <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-6">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <div className="w-2 h-4 bg-yellow-500 rounded-full"></div>
                    <span className="text-sm font-medium text-yellow-800">
                      {methods.watch('items')?.length} items agregados
                    </span>
                  </div>
                  <button
                    type="button"
                    onClick={() => {
                      toast('¬øEst√°s seguro de borrar los √≠tems?', {
                        description: 'Esta acci√≥n no se puede deshacer.',
                        action: {
                          label: 'S√≠, borrar',
                          onClick: () => {
                            localStorage.removeItem('quoteItems');
                            methods.reset({
                              ...methods.getValues(),
                              items: [],
                            });
                            toast.success('√çtems borrados correctamente');
                          },
                        },
                      });
                    }}
                    className="bg-white border border-yellow-300 text-yellow-700 px-3 py-2 rounded-lg hover:bg-yellow-50 text-sm font-medium transition-all duration-200 hover:shadow-md"
                  >
                    üßπ Limpiar √≠tems
                  </button>
                </div>
              </div>
            )}



            {/* Botones de acci√≥n responsive */}
            <div className="bg-white rounded-lg shadow-md border border-gray-200 p-4 sm:p-6">
              <div className="flex flex-col gap-4">
                
                {/* Mensaje si no hay cliente - Mobile First */}
                {!client && (
                  <div className="bg-orange-50 border border-orange-200 rounded-lg p-4">
                    <div className="flex items-center gap-2">
                      <div className="w-1 h-4 bg-orange-500 rounded-full"></div>
                      <p className="text-sm text-orange-800 font-medium">
                        Selecciona un cliente para continuar
                      </p>
                    </div>
                  </div>
                )}

                {/* Botones en mobile: vertical, desktop: horizontal */}
                <div className="flex flex-col sm:flex-row gap-3 sm:gap-4 sm:justify-between sm:items-center">
                  
                  {/* Bot√≥n Cancelar - Touch friendly */}
                  <button
                    type="button"
                    onClick={() => router.push('/cotizaciones')}
                    className="flex items-center justify-center gap-2 bg-gray-100 text-gray-700 px-6 py-4 sm:py-3 rounded-lg hover:bg-gray-200 transition-all duration-200 font-medium border border-gray-300 hover:shadow-md min-h-[48px] sm:min-h-0 text-sm sm:text-base"
                  >
                    <XCircle className="w-5 h-5" />
                    Cancelar
                  </button>

                  {/* Bot√≥n Guardar - Touch friendly */}
                  {client && (
                    <button
                      type="submit"
                      className="flex items-center justify-center gap-2 bg-blue-800 text-white px-6 py-4 sm:py-3 rounded-lg hover:bg-blue-900 transition-all duration-200 font-medium shadow-md hover:shadow-lg border-l-4 border-orange-500 min-h-[48px] sm:min-h-0 text-sm sm:text-base sm:order-last"
                    >
                      <PlusCircle className="w-5 h-5" />
                      Guardar Cotizaci√≥n
                    </button>
                  )}
                  
                </div>
              </div>
            </div>



          </form>
        </FormProvider>

        </div>
      </div>
    </div>
  )
}
