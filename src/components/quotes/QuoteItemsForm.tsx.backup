'use client';

import { QuoteItem } from '@prisma/client';
import { useEffect, useRef } from 'react';
import { useFormContext, useFieldArray } from 'react-hook-form';
import { Trash2 } from 'lucide-react';
import { QuoteItemForm } from '@/types';

const unidadesSugeridas = [
  'unidad',
  'metro',
  'metro cuadrado',
  'metro c√∫bico',
  'pieza',
  'paquete',
  'docena',
  'kilogramo',
  'litro',
  'rollo',
  'juego',
];



interface QuoteItemsFormProps {
  defaultValues?: {
    id?: number;
    clientId?: number;
    status: 'PENDING' | 'ACCEPTED' | 'REJECTED';
    notes: string;
    items: QuoteItemForm[];
  };
  isEditMode?: boolean;
}




export default function QuoteItemsForm({ defaultValues, isEditMode = false }: QuoteItemsFormProps) {
  const { register, control, watch, setValue, getValues } = useFormContext();
  const { fields, append, remove } = useFieldArray({
    control,
    name: 'items',
  });

  const watchedItems = watch('items') || [];

  useEffect(() => {
    if (watchedItems.length === 0) {
      append({ description: '', quantity: 1, unit: '', unitPrice: 0 });
    }
  }, [watchedItems.length, append]);

  const handleAddItem = () => {
    append({ description: '', quantity: 1, unit: '', unitPrice: 0 });
  };

  const total = watchedItems.reduce((sum: number, item: QuoteItem) => {
    const subtotal = item.quantity * item.unitPrice;
    return sum + (isNaN(subtotal) ? 0 : subtotal);
  }, 0);

  // Obtener el estado inicial desde props o el contexto

 /* üëá Solo copiar datos al formulario UNA vez */
  const initialized = useRef(false);

  useEffect(() => {
    if (!initialized.current && isEditMode && defaultValues) {
      setValue('items',  defaultValues.items  ?? []);
      setValue('notes',  defaultValues.notes  ?? '');
      setValue('status', defaultValues.status ?? 'PENDING');
      initialized.current = true;             // evita nuevas ejecuciones
    }
  }, [defaultValues, isEditMode, setValue]);





  return (
    <div className="space-y-4 sm:space-y-6">
      <div className="flex items-center justify-between">
        <h2 className="text-lg sm:text-xl font-semibold text-gray-800">√çtems de la cotizaci√≥n</h2>
        <span className="text-xs sm:text-sm text-gray-500 bg-gray-100 px-2 py-1 rounded-full">
          {watchedItems.length} {watchedItems.length === 1 ? 'item' : 'items'}
        </span>
      </div>

      {fields.map((field, index) => (
        <div key={field.id} className="flex flex-wrap items-end gap-4 border-b pb-4">
          <div className="flex flex-col w-60">
            <label className="text-sm font-medium text-gray-700">Descripci√≥n</label>
            <input
              {...register(`items.${index}.description`)}
              disabled={isEditMode}
              className="border-2 border-gray-200 rounded-lg px-3 py-3 sm:py-2 text-sm focus:outline-none focus:border-blue-800 focus:ring-2 focus:ring-blue-100 disabled:bg-gray-100 disabled:text-gray-500 transition-all duration-200"
              placeholder="Ej. Vidrio templado 6mm"
            />
            {isEditMode && <p className="text-xs text-gray-500 mt-1">Este campo no se puede editar.</p>}
          </div>

          <div className="flex flex-col w-24">
            <label className="text-sm font-medium text-gray-700">Cantidad</label>
            <input
              type="number"
              {...register(`items.${index}.quantity`, { valueAsNumber: true })}
              disabled={isEditMode}
              className="border-2 border-gray-200 rounded-lg px-3 py-3 sm:py-2 text-sm focus:outline-none focus:border-blue-800 focus:ring-2 focus:ring-blue-100 disabled:bg-gray-100 disabled:text-gray-500 transition-all duration-200"
              min={1}
            />
            {isEditMode && <p className="text-xs text-gray-500 mt-1">Ineditable.</p>}

          </div>

          <div className="flex flex-col w-40">
            <label className="text-sm font-medium text-gray-700">U. de Medida</label>
            <select
              {...register(`items.${index}.unit`)}
              disabled={isEditMode}
              className="border rounded px-3 py-2 text-sm bg-white focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:bg-gray-100 disabled:text-gray-500"
            >
              <option value="">Seleccionar...</option>
              {unidadesSugeridas.map((unidad) => (
                <option key={unidad} value={unidad}>
                  {unidad}
                </option>
              ))}
            </select>
            {isEditMode && <p className="text-xs text-gray-500 mt-1">Ineditable.</p>}

          </div>

          <div className="flex flex-col w-32">
            <label className="text-sm font-medium text-gray-700">Precio unitario</label>
            <input
              type="number"
              step="any"
              {...register(`items.${index}.unitPrice`, { valueAsNumber: true })}
              disabled={isEditMode}
              className="border rounded px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:bg-gray-100 disabled:text-gray-500"
              min={0}
            />
            {isEditMode && <p className="text-xs text-gray-500 mt-1">Ineditable.</p>}

          </div>

          <div className="flex flex-col w-28">
            <label className="text-sm font-medium text-gray-700">Subtotal</label>
            <div className="text-sm text-gray-800 pt-2">
              S/. {(
                (watchedItems[index]?.quantity || 0) * (watchedItems[index]?.unitPrice || 0)
              ).toFixed(2)}
            </div>
          </div>

          {!isEditMode && (
            <button
              type="button"
              onClick={() => remove(index)}
              className="text-red-600 hover:text-red-800 cursor-pointer"
              title="Eliminar √≠tem"
            >
              <Trash2 className="w-5 h-5" />
            </button>
          )}


        </div>
      ))}

      <div className="flex justify-between items-center pt-4">

      {!isEditMode && (
        <button
          type="button"
          onClick={handleAddItem}
          className="bg-blue-800 text-white px-6 py-3 sm:py-2 rounded-lg hover:bg-blue-900 text-sm font-medium cursor-pointer transition-all duration-200 border-l-4 border-orange-500 min-h-[48px] sm:min-h-0"
        >
          + Agregar √≠tem
        </button>
      )}



        <div className="text-lg font-semibold text-gray-800">
          Total: S/. {total.toFixed(2)}
        </div>
      </div>

      {isEditMode  && (
        <div className="space-y-4 pt-6">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Observaciones
            </label>
            <textarea
              {...register('notes')}
              rows={3}
              className="w-full border rounded px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="Agrega alguna nota adicional..."
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Estado de la cotizaci√≥n
            </label>

            <select
              {...register('status')}
              className="w-full border rounded px-3 py-2 text-sm bg-white focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="PENDING">Pendiente</option>
              <option value="ACCEPTED">Aprobada</option>
              <option value="REJECTED">Rechazada</option>
            </select>
            
            
          </div>
        </div>
      )}



    </div>
  );
}
