generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model company {
  id                  Int                @id @default(autoincrement())
  name                String
  ruc                 String             @unique
  logoUrl             String?
  address             String?
  phone               String?
  whatsapp            String?
  facebookUrl         String?
  instagramUrl        String?
  tiktokUrl           String?
  email               String?
  website             String?
  slogan              String?
  description         String?
  notes               String?
  legalRepresentative String?
  administrator       String?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  status              CompanyStatus      @default(ACTIVE)
  bankAccounts        BankAccount[]
  clients             Client[]
  contracts           Contract[]
  quotes              Quote[]
  wallets             Wallet[]
  colors              colors[]
  moldingColors       moldingColors[]
  moldingTextures     moldingTextures[]
  pricingBackings     pricingBacking[]
  pricingGlass        pricingGlass[]
  pricingMatboards    pricingMatboard[]
  pricingMoldings     pricingMolding[]
  pricingThickness    pricingThickness[]
  textures            textures[]
  users               user[]
}

model user {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  username      String?   @unique
  lastLogin     DateTime?
  password      String?
  phone         String?
  isActive      Boolean   @default(true)
  role          UserRole  @default(OPERATOR)
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  companyId     Int?
  quotes        Quote[]
  accounts      Account[]
  sessions      Session[]
  company       company?  @relation(fields: [companyId], references: [id])
}

model colors {
  id        Int             @id @default(autoincrement())
  name      String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  companyId Int
  family    GlassFamily?
  hexCode   String?
  isActive  Boolean         @default(true)
  type      GlassColorType?
  company   company         @relation(fields: [companyId], references: [id])

  @@unique([companyId, name])
}

model textures {
  id          Int           @id @default(autoincrement())
  name        String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  companyId   Int
  isActive    Boolean       @default(true)
  textureType GlassTexture?
  company     company       @relation(fields: [companyId], references: [id])

  @@unique([companyId, name])
}

model pricingThickness {
  id        Int              @id @default(autoincrement())
  companyId Int
  name      String
  moldings  pricingMolding[]
  company   company          @relation(fields: [companyId], references: [id])

  @@unique([companyId, name])
}

model pricingMolding {
  id          Int                   @id @default(autoincrement())
  companyId   Int
  name        String
  quality     PricingMoldingQuality
  thicknessId Int
  pricePerM   Decimal               @db.Decimal(12, 2)
  validFrom   DateTime              @default(now())
  validTo     DateTime?
  isActive    Boolean               @default(true)
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  company     company               @relation(fields: [companyId], references: [id])
  thickness   pricingThickness      @relation(fields: [thicknessId], references: [id])

  @@unique([companyId, name, thicknessId, validFrom])
  @@index([companyId, name, quality, thicknessId])
  @@index([isActive])
  @@index([validFrom])
  @@index([validTo])
}

model pricingGlass {
  id             Int            @id @default(autoincrement())
  companyId      Int
  commercialName String
  family         GlassFamily
  thicknessMM    Decimal        @db.Decimal(5, 2)
  colorType      GlassColorType @default(INCOLORO)
  colorId        Int?
  oldColor       String?
  price          Decimal        @db.Decimal(12, 2)
  validFrom      DateTime       @default(now())
  validTo        DateTime?
  isActive       Boolean        @default(true)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  company        company        @relation(fields: [companyId], references: [id])

  @@unique([companyId, commercialName, family, thicknessMM, validFrom])
  @@index([companyId, commercialName])
  @@index([companyId, family])
  @@index([colorType])
  @@index([isActive])
  @@index([validFrom])
  @@index([validTo])
}

model pricingMatboard {
  id          Int       @id @default(autoincrement())
  companyId   Int
  name        String
  pricePerFt2 Decimal   @db.Decimal(12, 2)
  validFrom   DateTime  @default(now())
  validTo     DateTime?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  company     company   @relation(fields: [companyId], references: [id])

  @@unique([companyId, name, validFrom])
  @@index([companyId, name])
  @@index([isActive])
  @@index([validFrom])
  @@index([validTo])
}

model pricingBacking {
  id          Int       @id @default(autoincrement())
  companyId   Int
  name        String
  pricePerFt2 Decimal   @db.Decimal(12, 2)
  validFrom   DateTime  @default(now())
  validTo     DateTime?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  company     company   @relation(fields: [companyId], references: [id])

  @@unique([companyId, name, validFrom])
  @@index([companyId, name])
  @@index([isActive])
  @@index([validFrom])
  @@index([validTo])
}

model moldingTextures {
  id        Int      @id @default(autoincrement())
  companyId Int
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  company   company  @relation(fields: [companyId], references: [id])

  @@unique([companyId, name])
}

model moldingColors {
  id        Int      @id @default(autoincrement())
  companyId Int
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  company   company  @relation(fields: [companyId], references: [id])

  @@unique([companyId, name])
}

model Client {
  id             Int          @id @default(autoincrement())
  documentType   DocumentType
  documentNumber String       @unique
  fullName       String
  contactPerson  String?
  businessName   String?
  phone          String?
  email          String?
  address        String?
  notes          String?
  createdAt      DateTime     @default(now())
  companyId      Int
  company        company      @relation(fields: [companyId], references: [id])
  contracts      Contract[]
  quotes         Quote[]
}

model Quote {
  id           Int           @id @default(autoincrement())
  code         String        @unique
  clientId     Int
  createdAt    DateTime      @default(now())
  status       QuoteStatus
  notes        String?
  total        Float         @default(0)
  createdById  String?
  companyId    Int
  contract     Contract?
  observations Observation[]
  client       Client        @relation(fields: [clientId], references: [id])
  company      company       @relation(fields: [companyId], references: [id])
  createdBy    user?         @relation(fields: [createdById], references: [id])
  items        QuoteItem[]
}

model QuoteItem {
  id          Int    @id @default(autoincrement())
  quoteId     Int
  description String
  unit        String
  quantity    Float
  unitPrice   Float
  subtotal    Float
  quote       Quote  @relation(fields: [quoteId], references: [id])
}

model Observation {
  id      Int      @id @default(autoincrement())
  quoteId Int
  date    DateTime @default(now())
  type    String
  message String
  quote   Quote    @relation(fields: [quoteId], references: [id])
}

model BankAccount {
  id          Int      @id @default(autoincrement())
  companyId   Int
  bank        String
  accountType String
  alias       String?
  number      String
  cci         String?
  currency    Currency @default(PEN)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  company     company  @relation(fields: [companyId], references: [id])
}

model Wallet {
  id        Int        @id @default(autoincrement())
  companyId Int
  type      WalletType
  phone     String
  qrUrl     String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  company   company    @relation(fields: [companyId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              user    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         user     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Contract {
  id             Int            @id @default(autoincrement())
  quoteId        Int            @unique
  date           DateTime       @default(now())
  paymentStatus  PaymentStatus
  amountPaid     Float          @default(0)
  amountPending  Float          @default(0)
  deliveryDate   DateTime?
  deliveredAt    DateTime?
  deliveryStatus DeliveryStatus
  notes          String?
  clientId       Int
  companyId      Int
  contractNote   String?
  client         Client         @relation(fields: [clientId], references: [id])
  company        company        @relation(fields: [companyId], references: [id])
  quote          Quote          @relation(fields: [quoteId], references: [id])
  items          ContractItem[]
  payments       Payment[]
}

model ContractItem {
  id          Int      @id @default(autoincrement())
  contractId  Int
  description String
  unit        String
  quantity    Float
  unitPrice   Float
  subtotal    Float
  contract    Contract @relation(fields: [contractId], references: [id])
}

model Payment {
  id         Int           @id @default(autoincrement())
  contractId Int
  date       DateTime      @default(now())
  amount     Float
  method     PaymentMethod
  reference  String?
  notes      String?
  contract   Contract      @relation(fields: [contractId], references: [id])
}

enum QuoteStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum PaymentStatus {
  PENDING
  PARTIAL
  PAID
}

enum DeliveryStatus {
  PENDING
  PARTIAL
  DELIVERED
}

enum CompanyStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum BranchStatus {
  ACTIVE
  INACTIVE
  CLOSED
}

enum WalletType {
  YAPE
  PLIN
}

enum DocumentType {
  DNI
  RUC
  CE
  PASSPORT
}

enum Currency {
  PEN
  USD
  EUR
}

enum PaymentMethod {
  CASH
  TRANSFER
  CARD
  YAPE
  PLIN
  OTHER
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  OPERATOR
}

enum GlassFamily {
  PLANO
  CATEDRAL
  TEMPLADO
  ESPEJO
}

enum GlassColorType {
  INCOLORO
  COLOR
  POLARIZADO
  REFLEJANTE
}

enum GlassTexture {
  LISO
  CUADRICULADO
  LLOVIZNA
  GARATACHI
  FLORA
  MARIHUANA
  RAMAS
}

enum PricingMoldingQuality {
  SIMPLE
  FINA
  BASTIDOR
}

enum PricingFrameKind {
  SIN_FONDO
  CON_FONDO
  FONDO_TRANSPARENTE
  CON_BASTIDOR
  ESPECIAL
}
