// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum QuoteStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum PaymentStatus {
  PENDING
  PARTIAL
  PAID
}

enum DeliveryStatus {
  PENDING
  PARTIAL
  DELIVERED
}

enum CompanyStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum BranchStatus {
  ACTIVE
  INACTIVE
  CLOSED
}

enum WalletType {
  YAPE
  PLIN
}

enum DocumentType {
  DNI
  RUC
  CE
  PASSPORT
}

enum Currency {
  PEN
  USD
  EUR
}

enum PaymentMethod {
  CASH
  TRANSFER
  CARD
  YAPE
  PLIN
  OTHER
}

enum UserRole {
  SUPER_ADMIN // Superusuario con acceso a todas las empresas
  ADMIN       // Administrador de una empresa específica  
  OPERATOR    // Usuario normal que trabaja dentro de una empresa
}

/**
 * ------------- Modelo central -------------
 */
model Company {
  id                  Int           @id @default(autoincrement())
  name                String
  ruc                 String        @unique
  logoUrl             String?
  address             String?
  phone               String?
  whatsapp            String?
  facebookUrl         String?
  instagramUrl        String?
  tiktokUrl           String?
  email               String?
  website             String?
  slogan              String? // Frase comercial
  description         String? // Breve descripción de la empresa
  notes               String? // Observaciones internas o adicionales
  legalRepresentative String?
  administrator       String?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  status              CompanyStatus @default(ACTIVE)

  /**
   * Relaciones principales
   */
  quotes       Quote[]
  clients      Client[]
  bankAccounts BankAccount[]
  wallets      Wallet[]
  branches     Branch[]
  contracts    Contract[]
  users        User[]

  pricingGlass        PricingGlass[]
  pricingMoldings     PricingMolding[]
  pricingMatboards    PricingMatboard[]
  pricingAccessories  PricingAccessory[]
  pricingBackings     PricingBacking[]
  pricingFramePresets PricingFramePreset[]
  MoldingTexture      MoldingTexture[]
  MoldingColor        MoldingColor[]
  PricingThickness    PricingThickness[]
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  username      String?   @unique
  lastLogin     DateTime?
  password      String?
  phone         String?
  isActive      Boolean   @default(true)
  role          UserRole  @default(OPERATOR)
  emailVerified DateTime? @map("email_verified")
  image         String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // NextAuth relations
  accounts Account[]
  sessions Session[]
  
  // Current company relation (opcional, puede ser null si tiene múltiples empresas)
  company   Company? @relation(fields: [companyId], references: [id])
  companyId Int?

  // Relaciones existentes
  quotes Quote[]

  @@map("users")
}

model Client {
  id             Int          @id @default(autoincrement())
  documentType   DocumentType
  documentNumber String       @unique
  fullName       String
  contactPerson  String?
  businessName   String?
  phone          String?
  email          String?
  address        String?
  notes          String?
  createdAt      DateTime     @default(now())
  companyId      Int
  company        Company      @relation(fields: [companyId], references: [id])

  quotes    Quote[]
  contracts Contract[]
}

model Quote {
  id        Int         @id @default(autoincrement())
  code      String      @unique // ← opcional POR AHORA
  clientId  Int
  createdAt DateTime    @default(now())
  status    QuoteStatus
  notes     String?
  total     Float       @default(0)

  // Nuevo
  createdBy   User?   @relation(fields: [createdById], references: [id])
  createdById String?
  company     Company @relation(fields: [companyId], references: [id])
  companyId   Int

  client       Client        @relation(fields: [clientId], references: [id])
  items        QuoteItem[]
  contract     Contract?
  observations Observation[]
}

model QuoteItem {
  id          Int    @id @default(autoincrement())
  quoteId     Int
  description String
  unit        String
  quantity    Float
  unitPrice   Float
  subtotal    Float

  quote Quote @relation(fields: [quoteId], references: [id])
}

/**
 * ------------- Datos complementarios -------------
 */
model BankAccount {
  id          Int      @id @default(autoincrement())
  bank        String
  accountType String // Corriente, Detracciones…
  alias       String?
  number      String
  cci         String?
  currency    Currency // PEN, USD…

  company   Company @relation(fields: [companyId], references: [id])
  companyId Int
}

model Wallet {
  id    Int        @id @default(autoincrement())
  type  WalletType // YAPE, PLIN
  phone String
  qrUrl String?

  company   Company @relation(fields: [companyId], references: [id])
  companyId Int
}

model Branch {
  id      Int          @id @default(autoincrement())
  name    String
  address String
  phone   String?
  status  BranchStatus @default(ACTIVE)

  company   Company @relation(fields: [companyId], references: [id])
  companyId Int
}

model Contract {
  id             Int            @id @default(autoincrement())
  quoteId        Int            @unique
  date           DateTime       @default(now())
  paymentStatus  PaymentStatus
  amountPaid     Float          @default(0)
  amountPending  Float          @default(0)
  deliveryDate   DateTime?
  deliveredAt    DateTime?
  deliveryStatus DeliveryStatus
  notes          String?

  quote    Quote          @relation(fields: [quoteId], references: [id])
  payments Payment[]
  items    ContractItem[]

  clientId Int
  client   Client @relation(fields: [clientId], references: [id])

  companyId    Int
  company      Company @relation(fields: [companyId], references: [id])
  contractNote String? // Nota del contrato, opcional
}

model ContractItem {
  id          Int    @id @default(autoincrement())
  contractId  Int
  description String
  unit        String
  quantity    Float
  unitPrice   Float
  subtotal    Float

  contract Contract @relation(fields: [contractId], references: [id])
}

model Payment {
  id         Int           @id @default(autoincrement())
  contractId Int
  date       DateTime      @default(now())
  amount     Float
  method     PaymentMethod // "cash", "transfer", etc.
  reference  String?
  notes      String?

  contract Contract @relation(fields: [contractId], references: [id])
}

model Observation {
  id      Int      @id @default(autoincrement())
  quoteId Int
  date    DateTime @default(now())
  type    String // "estado", "nota", etc.
  message String
  quote   Quote    @relation(fields: [quoteId], references: [id])
}

// ============================================================================
// VIDRIOS
// ============================================================================

enum GlassFamily {
  PLANO
  CATEDRAL
  TEMPLADO
  ESPEJO
}

enum GlassColorType {
  INCOLORO
  COLOR
  POLARIZADO
  REFLEJANTE
}

enum GlassTexture {
  LISO
  CUADRICULADO
  LLOVIZNA
  GARATACHI
  FLORA
  MARIHUANA
  RAMAS
}

// ── Tabla principal de precios de vidrio ─────────────────────────────────────
model PricingGlass {
  id        Int     @id @default(autoincrement())
  companyId Int
  company   Company @relation(fields: [companyId], references: [id])

  commercialName String // Nombre libre, obligatorio
  family         GlassFamily // PLANO, CATEDRAL, TEMPLADO, ESPEJO
  thicknessMM    Decimal        @db.Decimal(5, 2)
  colorType      GlassColorType @default(INCOLORO) // Afecta precio
  colorId        Int? // Solo informativo
  colorRef       Color?         @relation(fields: [colorId], references: [id])
  oldColor       String? // Temporal para migración
  price          Decimal        @db.Decimal(12, 2)

  validFrom DateTime  @default(now())
  validTo   DateTime?
  isActive  Boolean   @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([companyId, commercialName, family, thicknessMM, validFrom])
  @@index([companyId, commercialName])
  @@index([companyId, family])
  @@index([colorType])
  @@index([isActive])
  @@index([validFrom])
  @@index([validTo])
  @@map("pricing_glass")
}

// ── Catálogo simple de texturas ──────────────────────────────────────────
model Texture {
  id   Int    @id @default(autoincrement())
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("textures")
}

// ── Catálogo de colores de vidrio ──────────────────────────────────────────
model Color {
  id   Int    @id @default(autoincrement())
  name String @unique

  glasses PricingGlass[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("colors")
}

// ── Catálogo de texturas para molduras ──────────────────────────────────────
model MoldingTexture {
  id        Int     @id @default(autoincrement())
  companyId Int
  company   Company @relation(fields: [companyId], references: [id])
  name      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([companyId, name])
  @@map("molding_textures")
}

// ── Catálogo de colores para molduras ────────────────────────────────────────
model MoldingColor {
  id        Int     @id @default(autoincrement())
  companyId Int
  company   Company @relation(fields: [companyId], references: [id])
  name      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([companyId, name])
  @@map("molding_colors")
}

// ============================================================================
// CUADROS
// ============================================================================

enum PricingMoldingQuality {
  SIMPLE
  FINA
  BASTIDOR
}

enum PricingFrameKind {
  SIN_FONDO
  CON_FONDO
  FONDO_TRANSPARENTE
  CON_BASTIDOR
  ESPECIAL
}

// ---- Espesor de Molduras -----------------------------

model PricingThickness {
  id        Int     @id @default(autoincrement())
  companyId Int
  company   Company @relation(fields: [companyId], references: [id])
  name      String

  moldings PricingMolding[]

  @@unique([companyId, name])
  @@map("pricing_thickness")
}

// ── Molduras ─────────────────────────────────────────────────────────────────
model PricingMolding {
  id        Int     @id @default(autoincrement())
  companyId Int
  company   Company @relation(fields: [companyId], references: [id])

  name String

  quality     PricingMoldingQuality
  thicknessId Int
  thickness   PricingThickness      @relation(fields: [thicknessId], references: [id])
  pricePerM   Decimal               @db.Decimal(12, 2)

  validFrom DateTime  @default(now())
  validTo   DateTime?
  isActive  Boolean   @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([companyId, name, thicknessId, validFrom])
  @@index([companyId, name, quality, thicknessId])
  @@index([isActive])
  @@index([validFrom])
  @@index([validTo])
  @@map("pricing_molding")
}

// ── Paspartú ─────────────────────────────────────────────────────────────────
model PricingMatboard {
  id        Int     @id @default(autoincrement())
  companyId Int
  company   Company @relation(fields: [companyId], references: [id])

  name        String
  pricePerFt2 Decimal @db.Decimal(12, 2)

  validFrom DateTime  @default(now())
  validTo   DateTime?
  isActive  Boolean   @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([companyId, name, validFrom])
  @@index([companyId, name])
  @@index([isActive])
  @@index([validFrom])
  @@index([validTo])
  @@map("pricing_matboard")
}

// ── Accesorios ───────────────────────────────────────────────────────────────
model PricingAccessory {
  id        Int     @id @default(autoincrement())
  companyId Int
  company   Company @relation(fields: [companyId], references: [id])

  name  String
  price Decimal @db.Decimal(12, 2)

  validFrom DateTime  @default(now())
  validTo   DateTime?
  isActive  Boolean   @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([companyId, name, validFrom])
  @@index([companyId, name])
  @@index([isActive])
  @@index([validFrom])
  @@index([validTo])
  @@map("pricing_accessory")
}

// ── Backing / Soporte ───────────────────────────────────────────────────────
model PricingBacking {
  id        Int     @id @default(autoincrement())
  companyId Int
  company   Company @relation(fields: [companyId], references: [id])

  name        String
  pricePerFt2 Decimal @db.Decimal(12, 2)

  validFrom DateTime  @default(now())
  validTo   DateTime?
  isActive  Boolean   @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([companyId, name, validFrom])
  @@index([companyId, name])
  @@index([isActive])
  @@index([validFrom])
  @@index([validTo])
  @@map("pricing_backing")
}

// ── Presets de cuadro ───────────────────────────────────────────────────────
model PricingFramePreset {
  id        Int     @id @default(autoincrement())
  companyId Int
  company   Company @relation(fields: [companyId], references: [id])

  name   String
  kind   PricingFrameKind
  recipe Json

  isActive  Boolean   @default(true)
  validFrom DateTime  @default(now())
  validTo   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([companyId, name, validFrom])
  @@index([companyId, kind, isActive])
  @@index([validFrom])
  @@index([validTo])
  @@map("pricing_frame_preset")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
