// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum QuoteStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum PaymentStatus {
  PENDING
  PARTIAL
  PAID
}

enum DeliveryStatus {
  PENDING
  PARTIAL
  DELIVERED
}


enum CompanyStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum BranchStatus {
  ACTIVE
  INACTIVE
  CLOSED
}

enum WalletType {
  YAPE
  PLIN
}

enum DocumentType {
  DNI
  RUC
  CE
  PASSPORT
}

enum Currency {
  PEN
  USD
  EUR
}


enum PaymentMethod {
  CASH
  TRANSFER
  CARD
  YAPE
  PLIN
  OTHER
}

enum UserRole {
  ADMIN     // Superusuario con acceso a todas las empresas
  OWNER     // Administrador de una empresa específica
  STAFF     // Usuario normal que trabaja dentro de una empresa
}


/* ------------- Modelo central ------------- */
model Company {
  id           Int          @id @default(autoincrement())
  name         String
  ruc          String       @unique
  logoUrl      String?
  address      String?
  phone        String?
  whatsapp     String?
  facebookUrl  String?
  instagramUrl String?
  tiktokUrl    String?
  email        String?
  website      String?
  slogan       String?      // Frase comercial
  description  String?      // Breve descripción de la empresa
  notes        String?      // Observaciones internas o adicionales
  legalRepresentative String?
  administrator        String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  status      CompanyStatus @default(ACTIVE)

  /* Relaciones principales */
  quotes       Quote[]
  clients      Client[]
  bankAccounts BankAccount[]
  wallets      Wallet[]
  branches     Branch[]
  contracts    Contract[]
  users        User[]


    pricingGlassBases     PricingGlassBase[]
  pricingGlassModifiers PricingGlassModifier[]
  pricingGlassServices  PricingGlassService[]
  pricingMoldings       PricingMolding[]
  pricingMatboards      PricingMatboard[]
  pricingAccessories    PricingAccessory[]
  pricingBackings       PricingBacking[]
  pricingFramePresets   PricingFramePreset[]
}




model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  username  String   @unique
  lastLogin  DateTime?
  password   String
  phone      String?
  isActive   Boolean   @default(true)
  role       UserRole  @default(STAFF) // Enum que se sugiere agregar
  createdAt DateTime @default(now())
  updatedAt  DateTime  @updatedAt
  
  company   Company  @relation(fields: [companyId], references: [id])
  companyId  Int

  quotes    Quote[]
}


model Client {
  id              Int       @id @default(autoincrement())
  documentType    DocumentType
  documentNumber  String    @unique
  fullName        String
  contactPerson   String?
  businessName    String?
  phone           String?
  email           String?
  address         String?
  notes           String?
  createdAt       DateTime  @default(now())
  companyId      Int
  company        Company      @relation(fields: [companyId], references: [id])

  quotes          Quote[]
  contracts       Contract[]
}


model Quote {
  id          Int              @id @default(autoincrement())
  code       String               @unique   // ← opcional POR AHORA
  clientId    Int
  createdAt   DateTime         @default(now())
  status      QuoteStatus
  notes       String?
  total       Float            @default(0)

  // Nuevo
  createdBy   User?            @relation(fields: [createdById], references: [id])
  createdById Int?
  company     Company      @relation(fields: [companyId], references: [id])
  companyId   Int          

  client      Client           @relation(fields: [clientId], references: [id])
  items       QuoteItem[]
  contract    Contract?
  observations Observation[]
}



model QuoteItem {
  id            Int      @id @default(autoincrement())
  quoteId       Int
  description   String
  unit          String
  quantity      Float
  unitPrice     Float
  subtotal      Float

  quote         Quote    @relation(fields: [quoteId], references: [id])
}

/* ------------- Datos complementarios ------------- */
model BankAccount {
  id        Int      @id @default(autoincrement())
  bank      String
  accountType String   // Corriente, Detracciones…
  alias     String?
  number    String
  cci       String?
  currency  Currency     // PEN, USD…

  
  company   Company  @relation(fields: [companyId], references: [id])
  companyId Int      
}


model Wallet {
  id        Int      @id @default(autoincrement())
  type      WalletType   // YAPE, PLIN
  phone     String
  qrUrl     String?

  company   Company  @relation(fields: [companyId], references: [id])
  companyId Int      
}

model Branch {
  id        Int      @id @default(autoincrement())
  name      String
  address   String
  phone     String?
  status    BranchStatus @default(ACTIVE)

  company   Company  @relation(fields: [companyId], references: [id])
  companyId Int     
}



model Contract {
  id               Int             @id @default(autoincrement())
  quoteId          Int             @unique
  date             DateTime        @default(now())
  paymentStatus    PaymentStatus
  amountPaid       Float           @default(0)
  amountPending    Float           @default(0)
  deliveryDate     DateTime?
  deliveredAt      DateTime?
  deliveryStatus   DeliveryStatus
  notes            String?

  quote            Quote           @relation(fields: [quoteId], references: [id])
  payments         Payment[]
  items            ContractItem[]

  clientId         Int
  client           Client          @relation(fields: [clientId], references: [id])

  companyId        Int
  company          Company         @relation(fields: [companyId], references: [id])
  contractNote      String?         // Nota del contrato, opcional
  
}



model ContractItem {
  id             Int      @id @default(autoincrement())
  contractId     Int
  description    String
  unit           String
  quantity       Float
  unitPrice      Float
  subtotal       Float

  contract       Contract  @relation(fields: [contractId], references: [id])
}




model Payment {
  id            Int       @id @default(autoincrement())
  contractId    Int
  date          DateTime  @default(now())
  amount        Float
  method        PaymentMethod    // "cash", "transfer", etc.
  reference     String?
  notes         String?

  contract      Contract  @relation(fields: [contractId], references: [id])
}


model Observation {
  id         Int      @id @default(autoincrement())
  quoteId    Int
  date       DateTime @default(now())
  type       String   // "estado", "nota", etc.
  message    String
  quote      Quote    @relation(fields: [quoteId], references: [id])
}




// ============================================================================
// VIDRIOS
// ============================================================================

enum PricingGlassFamily {
  PLANO
  CATEDRAL
}

enum PricingGlassFinish {
  INCOLORO
  MATE
  POLARIZADO
  REFLEJANTE
}

enum PricingColor {
  NONE
  GRIS
  AMBAR
  AZUL
}

enum PricingCatedralPattern {
  FLORA
  CUADRICULADO
  KARATACHI
  MARI
  LLOVIZNA
  OTRO
}

enum PricingUnit {
  FT2
  UNIDAD
}

enum PricingGlassProcessType {
  CANTO_PULIDO
  CANTO_BISEL
  PERFORACION
  ESQUINA_REDONDA
  CORTE_ESPECIAL
}

enum PricingModifierTarget {
  FINISH_COLOR
  CATEDRAL_COLOR
  TEMPLADO
}

enum PricingModifierValueType {
  FLAT
  PERCENT
}

// ── Precios base ─────────────────────────────────────────────────────────────
model PricingGlassBase {
  id            Int                @id @default(autoincrement())
  companyId     Int
  company       Company            @relation(fields: [companyId], references: [id])

  family        PricingGlassFamily
  thicknessMM   Decimal            @db.Decimal(5,2)
  pricePerFt2   Decimal            @db.Decimal(12,2)
  minBillableFt2 Decimal?          @db.Decimal(6,2)
  minCharge     Decimal?           @db.Decimal(12,2)

  validFrom     DateTime           @default(now())
  validTo       DateTime?
  isActive      Boolean            @default(true)

  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt

  @@map("pricing_glass_base")
  @@index([companyId, family, thicknessMM])
  @@index([isActive])
  @@index([validFrom])
  @@index([validTo])
  @@unique([companyId, family, thicknessMM, validFrom])
}

// ── Modificadores ────────────────────────────────────────────────────────────
model PricingGlassModifier {
  id              Int                       @id @default(autoincrement())
  companyId       Int
  company         Company                   @relation(fields: [companyId], references: [id])

  target          PricingModifierTarget
  family          PricingGlassFamily?
  finish          PricingGlassFinish?
  color           PricingColor?
  minThicknessMM  Decimal?                  @db.Decimal(5,2)

  valueType       PricingModifierValueType
  value           Decimal                   @db.Decimal(12,4)

  validFrom       DateTime                  @default(now())
  validTo         DateTime?
  isActive        Boolean                   @default(true)

  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt

  @@map("pricing_glass_modifier")
  @@index([companyId, target])
  @@index([family, finish, color])
  @@index([isActive])
  @@index([validFrom])
  @@index([validTo])
  @@unique([companyId, target, family, finish, color, minThicknessMM, validFrom])
}

// ── Servicios ────────────────────────────────────────────────────────────────
model PricingGlassService {
  id          Int                     @id @default(autoincrement())
  companyId   Int
  company     Company                 @relation(fields: [companyId], references: [id])

  process     PricingGlassProcessType
  unit        PricingUnit
  price       Decimal                 @db.Decimal(12,2)
  minCharge   Decimal?                @db.Decimal(12,2)

  validFrom   DateTime                @default(now())
  validTo     DateTime?
  isActive    Boolean                 @default(true)

  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt

  @@map("pricing_glass_service")
  @@index([companyId, process, unit])
  @@index([isActive])
  @@index([validFrom])
  @@index([validTo])
  @@unique([companyId, process, unit, validFrom])
}


// ============================================================================
// CUADROS
// ============================================================================

enum PricingMoldingQuality {
  SIMPLE
  FINA
}

enum PricingMoldingThickness {
  MEDIA
  TRES_CUARTOS
  UNA_PULGADA
  PULGADA_Y_MEDIA
  PULGADA_TRES_CUARTOS
  DOS_PULGADAS
  OTRO
}

enum PricingFrameKind {
  SIN_FONDO
  CON_FONDO
  FONDO_TRANSPARENTE
  CON_BASTIDOR
  ESPECIAL
}

// ── Molduras ─────────────────────────────────────────────────────────────────
model PricingMolding {
  id          Int                    @id @default(autoincrement())
  companyId   Int
  company     Company                @relation(fields: [companyId], references: [id])

  name        String
  quality     PricingMoldingQuality
  thickness   PricingMoldingThickness
  pricePerM   Decimal                @db.Decimal(12,2)

  validFrom   DateTime               @default(now())
  validTo     DateTime?
  isActive    Boolean                @default(true)

  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt

  @@map("pricing_molding")
  @@index([companyId, name, quality, thickness])
  @@index([isActive])
  @@index([validFrom])
  @@index([validTo])
  @@unique([companyId, name, thickness, validFrom])
}

// ── Paspartú ─────────────────────────────────────────────────────────────────
model PricingMatboard {
  id          Int        @id @default(autoincrement())
  companyId   Int
  company     Company    @relation(fields: [companyId], references: [id])

  name        String
  pricePerFt2 Decimal     @db.Decimal(12,2)

  validFrom   DateTime    @default(now())
  validTo     DateTime?
  isActive    Boolean     @default(true)

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("pricing_matboard")
  @@index([companyId, name])
  @@index([isActive])
  @@index([validFrom])
  @@index([validTo])
  @@unique([companyId, name, validFrom])
}

// ── Accesorios ───────────────────────────────────────────────────────────────
model PricingAccessory {
  id          Int        @id @default(autoincrement())
  companyId   Int
  company     Company    @relation(fields: [companyId], references: [id])

  name        String
  price       Decimal     @db.Decimal(12,2)

  validFrom   DateTime    @default(now())
  validTo     DateTime?
  isActive    Boolean     @default(true)

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("pricing_accessory")
  @@index([companyId, name])
  @@index([isActive])
  @@index([validFrom])
  @@index([validTo])
  @@unique([companyId, name, validFrom])
}

// ── Backing / Soporte ───────────────────────────────────────────────────────
model PricingBacking {
  id          Int        @id @default(autoincrement())
  companyId   Int
  company     Company    @relation(fields: [companyId], references: [id])

  name        String
  pricePerFt2 Decimal     @db.Decimal(12,2)

  validFrom   DateTime    @default(now())
  validTo     DateTime?
  isActive    Boolean     @default(true)

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("pricing_backing")
  @@index([companyId, name])
  @@index([isActive])
  @@index([validFrom])
  @@index([validTo])
  @@unique([companyId, name, validFrom])
}

// ── Presets de cuadro ───────────────────────────────────────────────────────
model PricingFramePreset {
  id          Int             @id @default(autoincrement())
  companyId   Int
  company     Company         @relation(fields: [companyId], references: [id])

  name        String
  kind        PricingFrameKind
  recipe      Json

  isActive    Boolean         @default(true)
  validFrom   DateTime        @default(now())
  validTo     DateTime?

  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@map("pricing_frame_preset")
  @@index([companyId, kind, isActive])
  @@index([validFrom])
  @@index([validTo])
  @@unique([companyId, name, validFrom])
}


